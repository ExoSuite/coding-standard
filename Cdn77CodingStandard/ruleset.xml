<?xml version="1.0" ?>
<ruleset name="CDN77 Coding Standard">
    <description>The CDN77 Coding Standard.</description>

    <!-- Coding standard is heavily based on https://github.com/consistence/coding-standard/. -->

    <!-- use PSR-2 as the base standard -->
    <rule ref="PSR2">
        <!-- can not be suppressed -->
        <exclude name="Generic.Files.LineLength"/>

        <!-- we want to allow null as "default" value -->
        <exclude name="PEAR.Functions.ValidDefaultValue"/>

        <!-- checked by more generic Generic.PHP.LowerCaseKeyword -->
        <exclude name="Squiz.Functions.LowercaseFunctionKeywords"/>

        <!-- checked by more generic Generic.PHP.LowerCaseKeyword -->
        <exclude name="Squiz.ControlStructures.LowercaseDeclaration"/>

        <!-- TODO: breaks multi-line if -->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>

        <!-- TODO: breaks multi-line for -->
        <exclude name="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen"/>

        <!-- TODO: breaks multi-line for -->
        <exclude name="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose"/>
    </rule>

    <!-- disallow unused parameters -->
    <!-- TODO: too verbose, reports unused parameters that are forced by parent/interface -->
    <!--<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>-->

    <!-- disallow array(...), only allow [...] -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- forbid duplicate classes in the project. -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- allow empty catch statements -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH"/>
    </rule>

    <!-- report for loops that should actually be while loops, i.e. for (;true;) -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>

    <!-- report always-true/always-false conditions, i.e. if (TRUE) -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- report duplicated final modifiers (final method in a final class -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>

    <!-- ensure there is a space after type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!-- forbid old-school constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <!-- forbid any content before opening tag (except shebang) -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- forbid alternative PHP tags, allowing only <?php and <?= -->
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

    <!-- report usage of deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- forbid usage of unwanted old-school functions, i.e. sizeof, delete -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property
                name="forbiddenFunctions"
                type="array"
                value="
                    chop => rtrim,
                    close => closedir,
                    delete => unset,
                    doubleval => floatval,
                    fputs => fwrite,
                    ini_alter => ini_set,
                    is_double => is_float,
                    is_integer => is_int,
                    is_long => is_int,
                    is_null => null,
                    is_real => is_float,
                    is_writeable => is_writable,
                    join => implode,
                    key_exists => array_key_exists,
                    pos => current,
                    show_source => highlight_file,
                    sizeof => count,
                    strchr => strstr
                "/>
        </properties>
    </rule>

    <!-- forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">

        <!-- allow useless string concatenation in multiline mode for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- forbid Perl-style commends starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- enforce array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>

        <!-- uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>

        <!-- allow a single-value array to be written on multiple lines -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>

        <!-- allow array with multiple values to be written on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>

        <!-- disable fancy alignment of closing brace with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>

        <!-- disable fancy alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>

        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
    </rule>

    <!-- forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- enforce self::, instead of ClassName::, forces lower-case self, forbids spaces around :: -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- enforce doc comment alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>

    <!-- -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>

    <!-- enforce rules for function doc comments -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>

        <!-- does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>

        <!-- collection syntax such as string[] is not supported -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>

        <!-- enforces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>

        <!-- is not able to detect return types such as string|null as correct -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>

        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidThrows"/>

        <!-- breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>

        <!-- doc comment is not required for every method -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>

        <!-- do not require comments for @param -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>

        <!-- do not require @param for all parameters, most of them are natively documented in 7.1+ -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>

        <!-- do not enforce @return for void methods -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>

        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>

        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>

        <!-- breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>

        <!-- does not respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>

        <!-- disable parameter name alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>

        <!-- disable parameter type alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>

        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>

        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>

        <!-- doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>

    <!-- disallow global functions -->
    <rule ref="Squiz.Functions.GlobalFunction"/>

    <!-- forbid superconfusing increment/decrement usage in arithmetic operations -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage">
        <!-- disable fancy check for brackets that are not actually needed -->
        <exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/>
    </rule>

    <!-- forbid and/or, force && and || -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- forbid globals -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>

    <!-- forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions"/>

    <!-- enforce calls to built-in functions to be lower-case -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- forbid $this in static methods -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- enforce strings in apostrophes where applicable, forbid variables inside strings -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <message>Variable "%s" not allowed in double quoted string; use sprintf() or concatenation instead</message>
    </rule>

    <!-- enforce spacing in string concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <!-- enforce one space around dot -->
            <property name="spacing" value="1"/>
            <!-- does not apply for newlines -->
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- forbid brackets in echo statements -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- forbid spaces inside type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- forbid blank lines after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- enforce space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- enforce space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- TODO: does not work with first property in class without leading space -->
    <!--<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>-->

    <!-- forbid spaces around -> -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <!-- do not apply for newlines -->
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>5</severity><!-- turned off by PSR2 -> turning back on -->
    </rule>

    <!-- forbid meaningless method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- forbid inline control structures, i.e. `if ($foo) bar();` -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- forbid call-time pass by reference -->
    <rule ref="Generic.Functions.CallTimePassByReference"/>

    <!-- forbid nesting deeper than 6, warn at 4 -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="4"/>
            <property name="absoluteNestingLevel" value="6"/>
        </properties>
    </rule>

    <!-- forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- forbid usage of php_sapi_name() in favor of PHP_SAPI -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- forbid commented-out code -->
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="50"/>
        </properties>
    </rule>

    <!-- Selectively use some useful rules from Slevomat Coding Standard -->
    <!-- https://github.com/slevomat/coding-standard -->

    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedGlobalClasses" type="boolean" value="true"/>
            <property name="allowFullyQualifiedGlobalConstants" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalFunctions" type="boolean" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" type="boolean" value="true"/>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="1"/>
        </properties>
    </rule>

    <!-- enforce types to be written as natively if possible, forbids duplicated information in php doc etc. -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <properties>
            <property name="enableEachParameterAndReturnInspection" value="true"/>
            <property name="traversableTypeHints" type="array" value="Doctrine\Common\Collections\Collection"/>
            <property
                name="usefulAnnotations"
                type="array"
                value="
                    @after,
                    @afterClass,
                    @Attribute,
                    @Attributes,
                    @before,
                    @beforeClass,
                    @covers,
                    @coversDefaultClass,
                    @coversNothing,
                    @dataProvider,
                    @depends,
                    @deprecated,
                    @Enum,
                    @expectedDeprecation,
                    @expectedException,
                    @expectedExceptionCode,
                    @expectedExceptionMessage,
                    @expectedExceptionMessageRegExp,
                    @group,
                    @Groups,
                    @IgnoreAnnotation,
                    @internal,
                    @link,
                    @ORM\,
                    @Required,
                    @runInSeparateProcess,
                    @runTestsInSeparateProcesses,
                    @see,
                    @Target
                "
            />
        </properties>
    </rule>

    <!-- enforce using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- enforce presence of declare(strict_types=1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property
                name="newlinesCountBetweenOpenTagAndDeclare"
                value="2"
            />
            <property
                name="spacesCountAroundEqualsSign"
                value="0"
            />
            <property
                name="newlinesCountAfterDeclare"
                value="2"
            />
        </properties>
    </rule>

    <!-- forbid assignments in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>

    <!-- forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/>

    <!-- enforce language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>

    <!-- forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements">
        <properties>
            <property name="alwaysUsedPropertiesAnnotations" type="array" value="@ORM\"/>
        </properties>
    </rule>

    <!-- forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>

    <!-- forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- enforce comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- forbid fancy yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- enforce use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- enforce use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

    <!-- enforce presence of constant visibility (PHP 7.1+) -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- enforce ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- enforce one space between typehint and variable, enforce no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>

    <!-- forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>

    <!-- forbid using absolute class names -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>

    <!-- forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- forbid useless annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property
                name="forbiddenAnnotations"
                type="array"
                value="
                    @author,
                    @package,
                    @created,
                    @version,
                    @copyright,
                    @license,
                    @throws
                "
            />
        </properties>
    </rule>

    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>

    <!-- enforce one space between class methods -->
    <rule ref="Cdn77CodingStandard.WhiteSpace.MethodSpacing">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>

    <!-- enforce spaces around operators -->
    <rule ref="Cdn77CodingStandard.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property
                name="forbiddenCommentPatterns"
                type="array"
                value="
                    ~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i,
                    ~^Created by \S+\.\z~i,
                    ~^\S+ [gs]etter\.\z~i,
                " />
            </properties>
    </rule>

    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

    <!-- Require new instances with parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>

    <!-- Require usage of early exit instead of using else -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
</ruleset>
